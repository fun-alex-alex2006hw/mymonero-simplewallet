{"name":"Mymonero-simplewallet","tagline":"Generate simplewallet based on MyMonero 13 word mnemonic seed","body":"# Generate simplewallet based on MyMonero 13 word mnemonic seed\r\n\r\n[MyMonero](https://mymonero.com/) uses 13 word mnemonic seed, which\r\ncant be used in the Monero's `simplewallet`. The reason is, that the `simplewallet`\r\nuses 25 word mnemonic seed, and also, generation of private view and spend keys\r\nby the `simplewallet` is different than that used by [MyMonero](https://mymonero.com/).\r\n\r\nThus, at the moment you cant use your MyMonero account with simplewallet. This is\r\na problem, because what if MyMonero is online? Or what if it is going to be shutdown?\r\n\r\nIn this example, an attempt is made to generate a wallet file, based on\r\nMyMonero 13 mnemonic seed that can be used by `simplewallet`.\r\n\r\nMore information on the differences between the `simplewallet` and MyMonero,\r\ncan be found:\r\n\r\n  - [Cryptnote Tests](http://xmrtests.llcoins.net/addresstests.html)\r\n  - [Why MyMonero key derivation is different than for the simplewallet (Mnemonic)](https://www.reddit.com/r/Monero/comments/3s80l2/why_mymonero_key_derivation_is_different_than_for/)\r\n\r\nThe example was prepared and tested on Xubuntu 15.10 x64 and Monero 0.9.\r\n\r\nInstruction for Monero 0.9 compilation and setup of Monero's header files and libraries are at:\r\n - [Compile Monero 0.9 on Ubuntu 15.10 and 14.04 x64](https://github.com/moneroexamples/compile-monero-09-on-ubuntu)\r\n\r\nEnglish is assumed to be seed's language. Thus, if your seed is other language\r\nthen English, the example probably will not work.\r\n\r\n## C++: main.cpp\r\n\r\n```c++\r\nint main(int ac, const char* av[]) {\r\n\r\n    // get command line options\r\n    xmreg::CmdLineOptions opts {ac, av};\r\n\r\n    auto help_opt = opts.get_option<bool>(\"help\");\r\n\r\n    // if help was chosen, display help text and finish\r\n    if (*help_opt)\r\n    {\r\n        return 0;\r\n    }\r\n\r\n    // default language for the mnemonic\r\n    // representation of the private spend key\r\n    string language {\"English\"};\r\n\r\n    // get 13 word mnemonic seed from MyMonero\r\n    auto mnemonic_opt = opts.get_option<string>(\"mnemonic\");\r\n    auto wallet_file_opt = opts.get_option<string>(\"wallet-file\");\r\n    auto password_opt = opts.get_option<string>(\"password\");\r\n\r\n    // get the program command line options, or\r\n    // some default values for quick check\r\n    string mnemonic_str = mnemonic_opt\r\n                          ? *mnemonic_opt\r\n                          : \"slid otherwise jeers lurk swung tawny zodiac tusks twang cajun swagger peaches tawny\";\r\n\r\n\r\n    // simplewallet wallet file name, e.g., mmwallet.bin\r\n    // actually we do not directy create this file. we\r\n    // create a file *.keys containing the address and the private keys\r\n    string wallet_file = wallet_file_opt\r\n                         ? *wallet_file_opt\r\n                         : xmreg::get_home_folder() + string(\"mmwallet.bin\");\r\n\r\n    // name of the keys files\r\n    string keys_file_name = wallet_file + string(\".keys\");\r\n\r\n    string password = password_opt ? *password_opt : \"password\";\r\n\r\n    cout << \"\\n\"\r\n         << \"Mnemonic seed    : \" << mnemonic_str << endl;\r\n\r\n\r\n    // change the MyMonero 13 word mnemonic seed\r\n    // to its 16 byte hexadecimal version\r\n    xmreg::secret_key16 hexadecimal_seed;\r\n\r\n    // use modified words_to_bytes function.\r\n    xmreg::ElectrumWords::words_to_bytes(mnemonic_str, hexadecimal_seed, language);\r\n\r\n    cout << \"\\n\"\r\n         << \"Hexadecimal seed : \" << hexadecimal_seed << endl;\r\n\r\n\r\n    // take the 16 byte hexadecimal_seed, and\r\n    // and perform Keccak hash on it. It will\r\n    // produce 32 byte hash.\r\n    crypto::hash hash_of_seed;\r\n\r\n    cn_fast_hash(hexadecimal_seed.data, sizeof(hexadecimal_seed.data), hash_of_seed);\r\n\r\n    cout << \"\\n\"\r\n         << \"Hash of seed     : \" << hash_of_seed<< endl;\r\n\r\n\r\n    // having the hashed seed, we can proceed\r\n    // with generation of private and public spend keys.\r\n    // the keccak hash of the seed is used as a seed\r\n    // to generate the spend keys.\r\n    crypto::public_key public_spend_key;\r\n    crypto::secret_key private_spend_key;\r\n\r\n    crypto::generate_keys(public_spend_key, private_spend_key,\r\n                          xmreg::get_key_from_hash<crypto::secret_key>(hash_of_seed),\r\n                          true);\r\n\r\n    cout << \"\\n\"\r\n         << \"Private spend key: \" << private_spend_key << \"\\n\"\r\n         << \"Public spend key : \" << public_spend_key  << endl;\r\n\r\n    // now we get private and public view keys.\r\n    // to do this, we keccak hash the hash_of_seed again\r\n    crypto::hash hash_of_hash;\r\n    cn_fast_hash(hash_of_seed.data, sizeof(hash_of_seed.data), hash_of_hash);\r\n\r\n    crypto::public_key public_view_key;\r\n    crypto::secret_key private_view_key;\r\n\r\n\r\n    crypto::generate_keys(public_view_key, private_view_key,\r\n                          xmreg::get_key_from_hash<crypto::secret_key>(hash_of_hash),\r\n                          true);\r\n\r\n    cout << \"\\n\"\r\n         << \"Private view key : \" << private_view_key << \"\\n\"\r\n         << \"Public view key  : \" << public_view_key  << endl;\r\n\r\n\r\n\r\n    // having all keys, we can get the corresponding monero address\r\n    cryptonote::account_public_address address {public_spend_key, public_view_key};\r\n\r\n\r\n    cout << \"\\n\"\r\n         << \"Monero address   : \" << address << endl;\r\n\r\n\r\n    // Once we have all keys and address from the mnemonic seed\r\n    // we can proceed to generating wallet *.keys file\r\n    // that can be read by simplewallet\r\n\r\n\r\n    // we start this by creating instance of simple_account class\r\n    // and populate with the address, and private spend and view keys\r\n    // obtained in the previous steps\r\n    xmreg::simple_account account;\r\n\r\n    account.create_from_keys(address, private_spend_key, private_view_key);\r\n\r\n    std::string account_data;\r\n\r\n\r\n    if (!epee::serialization::store_t_to_binary(account, account_data))\r\n    {\r\n        cerr << \"Something went wrong with serializing simple_account instance\" << endl;\r\n        return 1;\r\n    }\r\n\r\n    rapidjson::Document json;\r\n    json.SetObject();\r\n    rapidjson::Value value(rapidjson::kStringType);\r\n\r\n\r\n    value.SetString(account_data.c_str(), account_data.length());\r\n\r\n    json.AddMember(\"key_data\", value, json.GetAllocator());\r\n\r\n    tools::wallet2::keys_file_data keys_file_data\r\n            = boost::value_initialized<tools::wallet2::keys_file_data>();\r\n\r\n    // Serialize the JSON object\r\n    rapidjson::StringBuffer buffer;\r\n    rapidjson::Writer<rapidjson::StringBuffer> writer(buffer);\r\n    json.Accept(writer);\r\n    account_data = buffer.GetString();\r\n\r\n    // Encrypt the entire JSON object.\r\n    crypto::chacha8_key key;\r\n    crypto::generate_chacha8_key(password, key);\r\n    std::string cipher;\r\n    cipher.resize(account_data.size());\r\n    keys_file_data.iv = crypto::rand<crypto::chacha8_iv>();\r\n    crypto::chacha8(account_data.data(), account_data.size(),\r\n                    key, keys_file_data.iv, &cipher[0]);\r\n    keys_file_data.account_data = cipher;\r\n\r\n    std::string buf;\r\n\r\n    // serialize key file data\r\n    if (!serialization::dump_binary(keys_file_data, buf))\r\n    {\r\n        cerr << \"Something went wrong with serializing keys_file_data\" << endl;\r\n        return 1;\r\n    }\r\n\r\n    // save serialized keys into the wallet file\r\n    if (!epee::file_io_utils::save_string_to_file(keys_file_name, buf))\r\n    {\r\n        cerr << \"Something went wrong with writing file: \" << keys_file_name << endl;\r\n        return 1;\r\n    }\r\n\r\n    cout << \"\\nKeys file \\\"\" << keys_file_name << \"\\\" created.\" << endl;\r\n\r\n    cout << \"\\nStart simplewallet using: \\n\"\r\n         << \"/opt/bitmonero/simplewallet --wallet-file \" << wallet_file\r\n         << endl;\r\n\r\n    cout << \"\\nPassord given is: \\\"\" << password <<\"\\\"\" << endl;\r\n\r\n    cout << \"\\nUse 'refresh' command in the simplewallet \"\r\n                    \"to scan the blockchain \"\r\n                    \"for your transactions. \"\r\n         << endl;\r\n\r\n\r\n    cout << \"\\nEnd of program.\" << endl;\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\n## Program options\r\n\r\n```bash\r\n./mymonerowallet -h\r\nmymonero-keys, generate simplewallet keys file based on MyMonero's 13 world mnemonic seed:\r\n  -h [ --help ] [=arg(=1)] (=0) produce help message\r\n  -m [ --mnemonic ] arg         13 word mnemonic seed from MyMonero\r\n  -w [ --wallet-file ] arg      output wallet file, e.g. mmwallet.bin\r\n  -p [ --password ] arg         wallet password\r\n```\r\n\r\n## Example 1\r\n\r\nExecute `mymonerowallet` with default options\r\n\r\n```bash\r\n./mymonerowallet\r\n```\r\n\r\nOutput:\r\n\r\n```bash\r\nMnemonic seed    : slid otherwise jeers lurk swung tawny zodiac tusks twang cajun swagger peaches tawny\r\n\r\nHexadecimal seed : <5878efd0a6d45b0374b49c000da07cd2>\r\n\r\nHash of seed     : <6d23fe14606a0d5fe62d05a78c4b5b1cae2f38f9330e42e86a50286db16ad61e>\r\n\r\nPrivate spend key: <804f08b84507fb0610910d04ae517c07ae2f38f9330e42e86a50286db16ad60e>\r\nPublic spend key : <b54264728412c71bb62caca5b3cb57eb96a48a580c97a65257290243e3adf401>\r\n\r\nPrivate view key : <dbb024c981cf7dc797593713f5f426c3b1cad50542c0814d4786e12e768be504>\r\nPublic view key  : <75fc0c90732a3db632bc0a169328067fa3f4c52e80ae067aa60bae8c4ccd8711>\r\n\r\nMonero address   : <48VWHdLTEpE5dqa5VpAy5xgQWBHZARiGmEmojNLqD4ef1FAzkPxCe9JXUYwCShRR5XNMGnyusrnkmMWr2HMdfDRx2vsrG7c>\r\n\r\nKeys file \"/home/mwo/mmwallet.bin.keys\" created.\r\n\r\nStart simplewallet using:\r\n/opt/bitmonero/simplewallet --wallet-file /home/marcin/mmwallet.bin.keys\r\n\r\nPassord given is: \"password\"\r\n\r\nUse 'refresh' command in the simplewallet to scan the blockchain for your transactions.\r\n```\r\n\r\nThe comparison of MyMonero website with the wallet generated is shown on the following screenshot:\r\n\r\n![After](https://raw.githubusercontent.com/moneroexamples/mymonero-simplewallet/master/img/example_01.jpg)\r\n\r\nAs can be seen on the screenshot, address, private view and spend keys, as well as balance of the\r\n`simplewallet` wallet generated agree with that of MyMonero website.\r\n\r\nObviously, we can use `simplewallet` now to transfer founds normally available only\r\nthrough MyMonero, as demonstrated on the following screenshot:\r\n\r\n![After](https://raw.githubusercontent.com/moneroexamples/mymonero-simplewallet/master/img/example_01a.jpg)\r\n\r\nAfter sending out xmr from `simplewallet`, MyMonero after few minutes refreshes my account status\r\ncorrectly showing that the founds are being send out.\r\n\r\n## Example 2\r\n\r\nExecute `mymonerowallet` with MyMonero seed\r\n\r\n```bash\r\n./mymonerowallet -m \"drying venomous baffles unusual northern cobra mobile unnoticed hedgehog oncoming neon gyrate unusual\" -w ~/mmwallet2.dat -p somepassword12\r\n```\r\n\r\nOutput:\r\n\r\n```bash\r\nMnemonic seed    : drying venomous baffles unusual northern cobra mobile unnoticed hedgehog oncoming neon gyrate unusual\r\n\r\nHexadecimal seed : <4fd72328c8cc9b9327cac47896eec0cb>\r\n\r\nHash of seed     : <ae114efe5eea0c72d95b8cb2f366d2b3d51a9a0edb6d5d91801b06f2cff68c70>\r\n\r\nPrivate spend key: <33469573a6348c09fd11c73ddd91b921d51a9a0edb6d5d91801b06f2cff68c00>\r\nPublic spend key : <0ccebf6b53e9acb923da7a9f7c81633d49e562fb726fa480ead525967aa70088>\r\n\r\nPrivate view key : <4baa54bdac1ec957982899b197c1810b279eccab4243d46b889c7c274570c606>\r\nPublic view key  : <b4fd6af8d1515e81bf32b4dd6bda99f6702473514d7e690dde7a5bb8fa312a42>\r\n\r\nMonero address   : <427FyKsPfaBXy6FByZLujQBFaT9zU1JXdNZfFNA3i6bqPsEHajfcKRFNhi1ptUEyLLiDkxPq2KQwJ3KYjnhYseuo8W9d5in>\r\n\r\nKeys file \"/home/marcin/mmwallet2.dat.keys\" created.\r\n\r\nStart simplewallet using:\r\n/opt/bitmonero/simplewallet --wallet-file /home/mwo/mmwallet2.dat\r\n```\r\n\r\nThe comparison of MyMonero website with the wallet generated is shown on the following screenshot (only address and private keys shown):\r\n\r\n![After](https://raw.githubusercontent.com/moneroexamples/mymonero-simplewallet/master/img/example_02.jpg)\r\n\r\n## How can you help?\r\n\r\nConstructive criticism, code and website edits are always good. They can be made through github.\r\n\r\nSome Monero are also welcome:\r\n```\r\n48daf1rG3hE1Txapcsxh6WXNe9MLNKtu7W7tKTivtSoVLHErYzvdcpea2nSTgGkz66RFP4GKVAsTV14v6G3oddBTHfxP6tU\r\n```    \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}